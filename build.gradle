apply plugin: "base"

buildscript {
    // 仓库配置
 	repositories {
        mavenLocal()
        mavenCentral()
        jcenter()

	}
	dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.2.2'
    }
}
// 一些简单的配置参数
// -----------------------------
// jar包版本依赖在gradle.properties中管理
ext {
    gradleScriptDir = "${rootProject.projectDir}/gradle"
}
// 所有项目共同的配置
// -----------------------
// 项目编译参数设置、依赖等等
configure(allprojects) {
    apply plugin: "java"
    apply from: "${gradleScriptDir}/ide.gradle"

 

    // 项目构建JDK版本
    project.sourceCompatibility = 1.8
    project.targetCompatibility = 1.8

    // 编译参数
    [compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:none", "-g"]
    [compileJava, javadoc, compileTestJava]*.options*.encoding = 'UTF-8'

    // 仓库
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {

    }
}

// 子项目共同的配置
// ----------------------
// 主要是javadoc的生成
configure(subprojects) { subproject ->

    javadoc {
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.encoding = "UTF-8"
        options.header = subproject.name
        //options.overview = "${projectDir}/src/api/overview.html"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allJava
    }
    task javadocJar(type: Jar) {
        classifier = "javadoc"
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}



// 根项目配置
// ---------------------
// 主要是文档等的生成。
configure(rootProject) {
    apply plugin: "war"
    description = "API Exporter"

    // 根项目不生成jar
    configurations.archives.artifacts.clear()

    task api(type: Javadoc) {
        group = "Documentation"
        description = "Generates aggregated Javadoc API documentation."
        title = "${rootProject.description} ${version} API"

        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = rootProject.description
        options.overview = "src/api/overview.html"
        options.splitIndex = true
        options.encoding = "UTF-8"
        options.locale = "en_US"
        options.linksOffline "http://docs.oracle.com/javase/7/docs/api/", "http://docs.oracle.com/javase/7/docs/api/"
        options.linksOffline "http://static.springsource.org/spring/docs/3.1.x/javadoc-api/", "http://static.springsource.org/spring/docs/3.1.x/javadoc-api/"
        options.linksOffline "http://static.springsource.org/spring-data/data-commons/docs/current/api/", "http://static.springsource.org/spring-data/data-commons/docs/current/api/"
        source subprojects.collect { project ->
            project.sourceSets.main.allJava
        }

        destinationDir = new File(buildDir, "api")
        classpath = files(subprojects.collect { project ->
            project.sourceSets.main.compileClasspath

        })
        maxMemory = "1024m"
    }

    task docsZip(type: Zip) {
        group = "Distribution"
        baseName = "avalon"
        classifier = "docs"
        description = "Builds -${classifier} archive containing api and reference."
        from("src/dist") {
            include "changelog.txt"
            include "notice.txt"
        }
        from(api) {
            into "api"
        }
        from("src/reference") {
            into "reference"
        }
    }

    artifacts {
        archives docsZip
    }

    dependencies {

        // Logging
        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
        runtime "org.apache.logging.log4j:log4j-core:$log4jVersion"

        providedCompile "org.projectlombok:lombok:1.12.4"

        // Test
        testCompile "junit:junit:$junitVersion"
        testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
    }
}

task wrapper(type:Wrapper){
	gradleVersion= '1.10'
}